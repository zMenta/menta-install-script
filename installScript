#!/bin/bash

# TODO modify bashrc file

declare GREEN=2
declare BLUE=4
declare WHITE=7

printtxt () {
    local color=$1
    local text=$2

    echo
    echo "$(tput setaf $color) $text $(tput setaf $WHITE)"
}

printdone () {

    echo "$(tput setaf $GREEN) Done. $(tput setaf $WHITE)"
    echo
}

declare install_latex=1 #true
declare install_doom_emacs=1
declare install_reveal_js=1
declare install_doom_default=0
declare godot_config=1
declare bashrc_config=1
declare bashrc_commands='\nalias emacs="emacsclient -c -a ''""'

# Cycle through the variables passed
while [ "$#" -gt 0 ]; do
    argument="$1"

    if [[ $argument == "no-latex"  ]]; then
        install_latex=0
    fi

    if [[ $argument == "no-doom"  ]]; then
        install_doom_emacs=0
    fi

    if [[ $argument == "no-revealjs"  ]]; then
        install_reveal_js=0
    fi

    if [[ $argument == "doom-default"  ]]; then
        install_doom_default=1
    fi

    if [[ $argument == "no-godot"  ]]; then
        godot_config=0
    fi

    if [[ $argument == "no-bashrc-config"  ]]; then
        bashrc_config=0
    fi

    shift
done

printtxt $BLUE "Updating and upgrading the system"
sudo apt update -y
sudo apt upgrade -y
printdone

printtxt $BLUE "Installing ripgrep"
sudo apt install ripgrep -y
printdone

printtxt $BLUE "Installing vim"
sudo apt install vim -y
printdone

printtxt $BLUE "Installing htop"
sudo apt install htop -y
printdone

printtxt $BLUE "Installing emacs"
sudo apt install emacs -y
printdone

# Brave Browser
printtxt $BLUE "Installing brave browser"
sudo apt install curl -y
sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list
sudo apt update -y
sudo apt install brave-browser -y
printdone


if [ $godot_config -eq 1 ]; then
    printtxt $BLUE "Creating godot directory"
    mkdir ~/godot
    bashrc_commands+='\nexport PATH="$HOME/godot:$PATH"'
    printdone
fi

if [ $install_latex -eq 1 ]; then
    printtxt $BLUE "Installing latex"
    sudo apt install texlive-full -y
    printdone
fi

if [ $install_reveal_js -eq 1 ]; then
    printtxt $BLUE "Installing reveal.js"
    # Reveal JS and Dependencies
    # -NodeJs
    curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash - &&\
    sudo apt-get install -y nodejs

    # -reveal js
    git clone --depth 1 https://github.com/hakimel/reveal.js.git ~/reveal.js
    cd ~/reveal.j && npm install
    cd ~
    printdone
fi

if [ $install_doom_emacs -eq 1 ]; then
    printtxt $BLUE "Installing Doom Emacs"
    git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
    ~/.emacs.d/bin/doom install -!
    bashrc_commands+='\nexport PATH="$HOME/.emacs.d/bin:$PATH"'
    printdone
fi

if [ $install_doom_default -eq 0 ] && [ $install_doom_emacs -eq 1 ]; then
    printtxt $BLUE "Installing my doom config"
    git clone --depth 1 https://github.com/zMenta/DoomEmacsConfig-and-More.git ~/menta_install_script/doom-config

    # Copies the files from my config files repo to doom emacs config folder.
    cp ~/menta_install_script/doom-config/DoomEmacs/config.el ~/.doom.d/config.el
    cp ~/menta_install_script/doom-config/DoomEmacs/init.el ~/.doom.d/init.el
    cp ~/menta_install_script/doom-config/DoomEmacs/packages.el ~/.doom.d/packages.el
    printdone
fi

if [ $bashrc_config -eq 1 ]; then
    printtxt $BLUE "Applying bashrc config"
    sudo sed -i "3i\\$bashrc_commands" ~/.bashrc
    printdone
fi

printtxt $GREEN "Script finished running. All done."
