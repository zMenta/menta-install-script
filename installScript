#!/bin/bash

declare RED=1
declare GREEN=2
declare BLUE=4
declare WHITE=7

printtxt () {
    local color=$1
    local text=$2

    echo
    echo "$(tput setaf $color) $text $(tput setaf $WHITE)"
}

printdone () {

    echo "$(tput setaf $GREEN) Done. $(tput setaf $WHITE)"
    echo
}

# Flag variables
# 1 == true
declare install_latex=1
declare install_doom_emacs=1
declare install_reveal_js=0
declare install_doom_default=0
declare godot_config=1
declare bashrc_config=1
declare install_rust=1
declare install_brave=1
declare install_emacs=1

# Bashrc related variables
declare emacs_bashrc='alias emacs="emacsclient -c -a '"''"'"'
declare godot_bashrc='export PATH="$HOME/godot:$PATH"'
declare doom_bashrc='export PATH="$HOME/.emacs.d/bin:$PATH"'

declare bashrc_commands=()
declare bashrc_log=("")


# Cycle through the flags
while [ "$#" -gt 0 ]; do
    argument="$1"

    if [[ $argument == "help" ]]; then
        printtxt $BLUE "You called for help!"
        echo "   Check the github page documentation for complete instructions and script flags."
        echo ""
        echo "Flags:"
        printtxt $WHITE "Flag usage example -> bash installScript no-latex d-revealjs"
        echo ""
        echo "  1. no-latex"
        echo "  2. no-doom"
        echo "  3. d-revealjs"
        echo "  4. doom-default"
        echo "  5. no-godot"
        echo "  6. no-bashrc-config"
        echo "  7. no-rust"
        echo "  8. no-brave"
        echo "  9. no-emacs"
        echo "  10. help"
        echo ""
        exit 1

    elif [[ $argument == "no-latex"  ]]; then
        install_latex=0

    elif [[ $argument == "no-doom"  ]]; then
        install_doom_emacs=0


    elif [[ $argument == "d-revealjs"  ]]; then
        install_reveal_js=1


    elif [[ $argument == "doom-default"  ]]; then
        install_doom_default=1


    elif [[ $argument == "no-godot"  ]]; then
        godot_config=0

    elif [[ $argument == "no-bashrc-config"  ]]; then
        bashrc_config=0

    elif [[ $argument == "no-rust"  ]]; then
        install_rust=0

    elif [[ $argument == "no-brave"  ]]; then
        install_brave=0

    elif [[ $argument == "no-emacs"  ]]; then
        install_emacs=0

    else
        printtxt $RED "Invalid script flag of -> $argument"
        printtxt $WHITE "Use the 'help' flag to get more information about script flags."
        echo " -> bash installScript help"
        echo ""
        # exit code 128 = Invalid argument to exit
        exit 128
    fi

    shift
done

printtxt $BLUE "Updating and upgrading the system"
sudo apt update -y
sudo apt upgrade -y
printdone

printtxt $BLUE "Installing ripgrep"
sudo apt install ripgrep -y
printdone

printtxt $BLUE "Installing vim"
sudo apt install vim -y
printdone

printtxt $BLUE "Installing htop"
sudo apt install htop -y
printdone

if [ $install_emacs -eq 1  ]; then
    printtxt $BLUE "Installing emacs"

    printtxt $BLUE " Installing emacs dependencies"
    sudo apt install build-essential libgtk-3-dev libgnutls28-dev libtiff5-dev libgif-dev libjpeg-dev libpng-dev libxpm-dev libncurses-dev texinfo

    #Native Json packages
    sudo apt install libjansson4 libjansson-dev

    #Native compilation support
    sudo apt install libgccjit0 libgccjit-10-dev gcc-10 g++-10

    mkdir ~/menta_install_script/emacs

  # 1.  Obtain and unpack the Emacs release, with commands like this:

  #   	 wget https://ftp.gnu.org/gnu/emacs/emacs-VERSION.tar.xz
  #   	 tar -xf emacs-VERSION.tar.xz

  #     where VERSION is the Emacs version number.

    cd ~/menta_install_script/emacs
    wget https://ftp.gnu.org/gnu/emacs/emacs-28.1.tar.xz
    tar -xf emacs-28.1.tar.xz

    cd emacs-28.1

    ./configure --with-json --with-native-compilation
    make
    sudo make install

    cd ~
    # sudo apt install emacs -y
    printdone
fi


if [ $install_brave -eq 1 ]; then
    # Brave Browser
    printtxt $BLUE "Installing brave browser"
    sudo apt install curl -y
    sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"|sudo tee /etc/apt/sources.list.d/brave-browser-release.list
    sudo apt update -y
    sudo apt install brave-browser -y
    printdone
fi


if [ $godot_config -eq 1 ]; then
    printtxt $BLUE "Started Godot Config"
    mkdir ~/godot
    if grep -Fxq "$godot_bashrc" ~/.bashrc; then
        bashrc_log+=( "Godot configuration is already in ~/.bashrc" )
    else
        bashrc_log+=( "Inserted Godot configuration is ~/.bashrc" )
        bashrc_commands+=("$godot_bashrc")
    fi
    printdone
fi

if [ $install_latex -eq 1 ]; then
    printtxt $BLUE "Installing latex"
    sudo apt install texlive-full -y
    printdone
fi

if [ $install_reveal_js -eq 1 ]; then
    printtxt $BLUE "Installing reveal.js"
    # Reveal JS and Dependencies
    # -NodeJs
    curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash - &&\
    sudo apt-get install -y nodejs

    # -reveal js
    git clone --depth 1 https://github.com/hakimel/reveal.js.git ~/.reveal.js
    cd ~/.reveal.j && npm install
    cd ~
    printdone
fi

if [ $install_doom_emacs -eq 1 ]; then
    printtxt $BLUE "Installing Doom Emacs"
    git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
    ~/.emacs.d/bin/doom install -!
    if grep -Fxq "$doom_bashrc" ~/.bashrc; then
        bashrc_log+=( "Doom emacs configuration is already in ~/.bashrc" )
    else
        bashrc_commands+=("$doom_bashrc")
        bashrc_log+=( "Inserted Doom emacs configuration is ~/.bashrc" )
    fi
    printdone
fi

if [ $install_doom_default -eq 0 ] && [ $install_doom_emacs -eq 1 ]; then
    printtxt $BLUE "Installing my doom config"
    git clone --depth 1 https://github.com/zMenta/DoomEmacsConfig-and-More.git ~/menta_install_script/doom-config

    # Copies the files from my config files repo to doom emacs config folder.
    cp -r ~/menta_install_script/doom-config/DoomEmacs/snippets ~/.doom.d
    cp ~/menta_install_script/doom-config/DoomEmacs/config.el ~/.doom.d/config.el
    cp ~/menta_install_script/doom-config/DoomEmacs/init.el ~/.doom.d/init.el
    cp ~/menta_install_script/doom-config/DoomEmacs/packages.el ~/.doom.d/packages.el
    printdone
fi

if [ $install_rust -eq 1 ]; then
    printtxt $BLUE "Installing Rust"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    printdone
fi

if [ $bashrc_config -eq 1 ]; then
    printtxt $BLUE "Applying bashrc config"
    if grep -Fxq "$emacs_bashrc" ~/.bashrc; then
        bashrc_log+=( "Emacs configuration is already in ~/.bashrc" )
    else
        bashrc_commands+=("$emacs_bashrc")
        bashrc_log+=( "Inserted Emacs configuration is ~/.bashrc" )
    fi

    # Write the configs in the ~/.bashrc file
    for config in "${bashrc_commands[@]}"; do
        # sudo sed -i "4i\\$config" ~/.bashrc
        sudo echo "$config" >> ~/.bashrc
    done

    #Print bashrc_log
    for log in "${bashrc_log[@]}"; do
        echo $log
    done
    printdone
fi

printtxt $GREEN "Script finished running. All done."

if [ $install_doom_emacs -eq 1 ]; then
    echo "Before starting Doom emacs, don't forget to do this:"
    printtxt $WHITE "1. To run 'doom sync' to apply the configuration in Doom emacs!"
    printtxt $WHITE "2. Change the user-name in the config.el file."
    printtxt $WHITE "3. Have fun!"
fi

echo ""
echo "Enjoy yourself!"
echo ""
